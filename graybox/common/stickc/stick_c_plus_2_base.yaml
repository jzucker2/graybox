# https://docs.m5stack.com/en/core/M5StickC%20PLUS2
# https://devices.esphome.io/devices/M5Stack-M5StickC-PLUS2
# Issues: psram, motion sensor, ILI9xxx
packages:
  esp32: !include ../boards/stick_c_plus_2_device.yaml
  esphome: !include ../core/simple_esphome.yaml
  wifi_base: !include ../templates/wifi_base.yaml
  shutdown: !include ../shutdown.yaml
  deep_sleep_base: !include ../templates/deep_sleep_base.yaml
  base_goober: !include ../templates/base_goober.yaml

# https://esphome.io/components/esphome.html
esphome:
  on_boot:
    then:
      - pcf8563.read_time:

# Borrowed from dial
# https://esphome.io/components/time/index.html
time:
  # RTC - BM8563
  # https://esphome.io/components/time/pcf8563.html
  - platform: pcf8563
    id: rtctime
    i2c_id: bus_internal
    address: 0x51
    update_interval: never
  # https://esphome.io/components/time/homeassistant.html
  - id: !extend esptime
    on_time_sync:
      then:
        - pcf8563.write_time:

# https://esphome.io/components/sensor/
sensor:
  # https://esphome.io/components/sensor/adc.html
  # Battery voltage measured through ADC1_CH2. PLUS2 has a voltage divider,
  # so reading needs to be multiplied by 2
  - platform: adc
    pin: GPIO38
    attenuation: 12db
    update_interval: 60s
    name: "Battery Voltage"
    id: battery_voltage
    icon: "mdi:battery"
    filters:
      - multiply: 2.0

# https://esphome.io/components/text_sensor/template.html
text_sensor:
  - platform: template
    name: "${friendly_name} Battery Status"
    id: battery_status
    icon: "mdi:battery-unknown"
    lambda: |-
      float v = id(battery_voltage).state;
      if (v >= 3.82) {
        return {"Full"};
      } else if (v >= 3.62) {
        return {"High"};
      } else if (v >= 3.48) {
        return {"Medium"};
      } else if (v >= 0) {
        return {"Low"};
      } else {
        return {"Error"};
      }
    update_interval: 60s

# https://esphome.io/components/binary_sensor/index.html
binary_sensor:
  # https://esphome.io/components/binary_sensor/gpio
  # Turn on display backlight while Button A is pressed
  - platform: gpio
    pin:
      number: GPIO37
      inverted: true
    name: "${friendly_name} Button A"
    id: button_a

  # https://esphome.io/components/binary_sensor/gpio
  # Play 1000Hz tone through buzzer while Button B is pressed
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: "${friendly_name} Button B"
    id: button_b

  # https://esphome.io/components/binary_sensor/gpio
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "${friendly_name} Button C"
    id: button_c

light:
  # https://esphome.io/components/light/monochromatic.html
  - platform: monochromatic
    output: builtin_led
    name: ${friendly_name} Led
    id: led1

  # https://esphome.io/components/light/monochromatic.html
  - platform: monochromatic
    output: backlight
    name: ${friendly_name} Backlight
    id: display_bl

# https://esphome.io/components/output/
output:
  # https://esphome.io/components/output/ledc
  - platform: ledc
    pin: 19
    inverted: false
    id: builtin_led

  # https://esphome.io/components/output/ledc
  - platform: ledc
    pin: 2
    inverted: true
    id: buzzer

  # https://esphome.io/components/output/ledc
  - platform: ledc
    pin: 27
    inverted: false
    id: backlight

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO15

i2c:
  - id: bus_internal
    sda: GPIO21
    scl: GPIO22
    scan: True

# https://esphome.io/components/script.html
script:
  - id: activate_buzzer_demo_script
    mode: single
    then:
      - logger.log: "Running activate_buzzer_demo_script"
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "1000Hz"
      - output.set_level:
          id: buzzer
          level: "50%"

  - id: turn_off_buzzer_script
    mode: single
    then:
      - logger.log: "Running turn_off_buzzer_script"
      - output.turn_off: buzzer
