# https://github.com/wifwucite/esphome-ble-controller

## Device-specific

## bluetooth
# https://esphome.io/components/ble_client.html
# https://esphome.io/components/sensor/ble_client.html
# https://esphome.io/components/output/ble_client.html
ble_client:
  - mac_address: ${volcano_mac_address}
    id: volcano
    auto_connect: ${autoconnect}
    on_connect:
      then:
        - lambda: |-
            ESP_LOGD("ble_client_lambda", "Connected to BLE device");
    on_disconnect:
      then:
        - lambda: |-
            ESP_LOGD("ble_client_lambda", "Disconnected from BLE device");

sensor:
  # https://esphome.io/components/sensor/ble_client.html
  # https://esphome.io/components/sensor/ble_client.html#raw-data-parsing-lambda
  - platform: ble_client
    type: characteristic
    ble_client_id: volcano
    update_interval: ${temperature_sensor_update_interval}
    name: "${friendly_name} Temperature Sensor"
    service_uuid: ${main_service_uuid}
    characteristic_uuid: ${current_temperature_char_uuid}
    unit_of_measurement: "Â°C"
    device_class: "temperature"
    state_class: "measurement"
    lambda: |-
      ESP_LOGD("volcano_temp", "First check if control switch is enabled");
      if (id(enable_control_switch).state) {
        // Switch is ON, do something here
        ESP_LOGD("volcano_temp", "Control switch is on so fetch data");
      } else {
        // Switch is OFF, do something else here
        ESP_LOGD("volcano_temp", "Control switch is off so return 0.0");
        // TODO: double check return values
        return 0.0;
      }
      float converted_read_value = encode_uint16(x[1], x[0]);
      ESP_LOGD("volcano_temp", "Got converted_read_value: %f", converted_read_value);
      float final_read_temp = converted_read_value / 10.0;
      float final_return_temp;
      if (final_read_temp < 6535.6) {
        final_return_temp = final_read_temp;
      } else {
        final_return_temp = 40;
      }
      ESP_LOGD("volcano_temp", "Got final_read_temp: %f", final_read_temp);
      ESP_LOGD("volcano_temp", "Got final_return_temp: %f", final_return_temp);
      return final_return_temp;

  - platform: ble_client
    type: characteristic
    ble_client_id: volcano
    update_interval: ${temperature_sensor_update_interval}
    name: "${friendly_name} Primary Info Sensor"
    service_uuid: ${primary_info_service_uuid}
    characteristic_uuid: ${current_primary_info_char_uuid}
    lambda: |-
      ESP_LOGD("volcano_primary_info", "First check if control switch is enabled");
      if (id(enable_control_switch).state) {
        // Switch is ON, do something here
        ESP_LOGD("volcano_primary_info", "Control switch is on so fetch data");
      } else {
        // Switch is OFF, do something else here
        ESP_LOGD("volcano_primary_info", "Control switch is off so return 0.0");
        // TODO: double check return values
        return 0.0;
      }
      uint16_t reverse_extra_encoded = encode_uint16(x[1], x[0]);
      ESP_LOGD("volcano_primary_info", "Got reverse_extra_encoded: %u", reverse_extra_encoded);
      bool final_heat_status = false;
      bool final_fan_status = false;
      // first heating
      if ((reverse_extra_encoded & 0x0020) == 0) {
        ESP_LOGD("volcano_primary_info", "heating is off");
        final_heat_status = false;
      } else {
        ESP_LOGD("volcano_primary_info", "heating is on");
        final_heat_status = true;
      }
      // then fan
      if ((reverse_extra_encoded & 0x2000) == 0) {
        ESP_LOGD("volcano_primary_info", "fan is off");
        final_fan_status = false;
      } else {
        ESP_LOGD("volcano_primary_info", "fan is on");
        final_fan_status = true;
      }
      id(heat_status).publish_state(final_heat_status);
      id(fan_status).publish_state(final_fan_status);
      return 1.0;

  - platform: ble_client
    type: rssi
    ble_client_id: volcano
    name: "${friendly_name} BLE RSSI"

switch:
  - platform: template
    name: "${friendly_name} Heat Switch"
    icon: "${heat_icon}"
    restore_mode: ${volcano_switch_restore_mode}
    optimistic: true
    assumed_state: true
    turn_on_action:
      - if:
          condition:
            switch.is_off: enable_control_switch
          then:
            - lambda: |-
                ESP_LOGD("heat_switch_on_action", "Skipping real work because control is off");
          else:
            - ble_client.ble_write:
                id: volcano
                service_uuid: ${main_service_uuid}
                characteristic_uuid: ${heat_turn_on_char_uuid}
                # List of bytes to write.
                value: [0x00]
    turn_off_action:
      - if:
          condition:
            switch.is_off: enable_control_switch
          then:
            - lambda: |-
                ESP_LOGD("heat_switch_off_action", "Skipping real work because control is off");
          else:
            - ble_client.ble_write:
                id: volcano
                service_uuid: ${main_service_uuid}
                characteristic_uuid: ${heat_turn_off_char_uuid}
                # List of bytes to write.
                value: [0x00]

  - platform: template
    name: "${friendly_name} Fan Switch"
    icon: "${fan_icon}"
    restore_mode: ${volcano_switch_restore_mode}
    optimistic: true
    assumed_state: true
    turn_on_action:
      - if:
          condition:
            switch.is_off: enable_control_switch
          then:
            - lambda: |-
                ESP_LOGD("fan_switch_on_action", "Skipping real work because control is off");
          else:
            - ble_client.ble_write:
                id: volcano
                service_uuid: ${main_service_uuid}
                characteristic_uuid: ${fan_turn_on_char_uuid}
                # List of bytes to write.
                value: [0x00]
    turn_off_action:
      - if:
          condition:
            switch.is_off: enable_control_switch
          then:
            - lambda: |-
                ESP_LOGD("fan_switch_off_action", "Skipping real work because control is off");
          else:
            - ble_client.ble_write:
                id: volcano
                service_uuid: ${main_service_uuid}
                characteristic_uuid: ${fan_turn_off_char_uuid}
                # List of bytes to write.
                value: [0x00]

  # https://esphome.io/components/switch/template.html
  - platform: template
    name: "${friendly_name} Enable Control Switch"
    id: enable_control_switch
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    assumed_state: false

# https://esphome.io/components/esp32_ble_tracker
# esp32_ble_tracker:

binary_sensor:
  # https://esphome.io/components/binary_sensor/template.html
  - platform: template
    name: "${friendly_name} Heat Status"
    id: heat_status
    icon: "${heat_icon}"

  - platform: template
    name: "${friendly_name} Fan Status"
    id: fan_status
    icon: "${fan_icon}"

    # https://esphome.io/components/esp32_ble_tracker
    # - platform: ble_presence
    #   mac_address: ${volcano_mac_address}
    #   name: "${friendly_name} Volcano ESP32 BLE Presence"
