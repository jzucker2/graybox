bme680_bsec:
  - id: bme680_internal
    i2c_id: grove
    address: 0x77

# https://esphome.io/cookbook/bme280_environment
# https://esphome.io/components/sensor/bme680_bsec.html
sensor:
  # https://esphome.io/components/sensor/bme680_bsec.html
  - platform: bme680_bsec
    bme680_bsec_id: bme680_internal
    temperature:
      name: "${friendly_name} BME680 Temperature"
      id: bme680_temperature
    pressure:
      name: "${friendly_name} BME680 Pressure"
      id: bme680_pressure
    humidity:
      name: "${friendly_name} BME680 Humidity"
      id: bme680_humidity
    gas_resistance:
      name: "${friendly_name} BME680 Gas Resistance"
      id: gas_resistance
    iaq:
      name: "${friendly_name} BME680 IAQ"
      id: iaq
    iaq_accuracy:
      # IAQ accuracy as a numeric value of 0, 1, 2, 3
      name: "${friendly_name} BME680 Numeric IAQ Accuracy"
    co2_equivalent:
      name: "${friendly_name} BME680 CO2 Equivalent"
      filters:
        - median
    breath_voc_equivalent:
      name: "${friendly_name} BME680 Breath VOC Equivalent"
      filters:
        - median
  # https://esphome.io/cookbook/bme280_environment
#  - platform: template
#    name: "${friendly_name} Altitude"
#    lambda: |-
#      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
#      return ((id(bme680_temperature).state + 273.15) / 0.0065) *
#        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme680_pressure).state), 0.190234) - 1); // in meter
#    update_interval: 15s
#    icon: 'mdi:signal'
#    unit_of_measurement: 'm'
#  - platform: template
#    name: "${friendly_name} Equivalent sea level pressure"
#    lambda: |-
#      const float STANDARD_ALTITUDE = 0.6; // in meters, see note
#      return id(bme680_pressure).state / powf(1 - ((0.0065 * STANDARD_ALTITUDE) /
#        (id(bme680_temperature).state + (0.0065 * STANDARD_ALTITUDE) + 273.15)), 5.257); // in hPa
#    update_interval: 15s
#    unit_of_measurement: 'hPa'
  - platform: absolute_humidity
    name: "${friendly_name} Absolute Humidity"
    temperature: bme680_temperature
    humidity: bme680_humidity
  - platform: template
    name: "${friendly_name} Dew Point Metric"
    id: dew_point_sensor
    lambda: |-
      return (243.5*(log(id(bme680_humidity).state/100)+((17.67*id(bme680_temperature).state)/
      (243.5+id(bme680_temperature).state)))/(17.67-log(id(bme680_humidity).state/100)-
      ((17.67*id(bme680_temperature).state)/(243.5+id(bme680_temperature).state))));
    unit_of_measurement: °C
    icon: 'mdi:thermometer-alert'
  # https://esphome.io/components/copy.html
  - platform: copy
    source_id: dew_point_sensor
    name: "${friendly_name} Dew Point Imperial"
    # https://esphome.io/components/sensor/index.html#example-converting-celsius-to-fahrenheit
    filters:
      - lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "°F"

text_sensor:
  - platform: bme680_bsec
    bme680_bsec_id: bme680_internal
    iaq_accuracy:
      name: "${friendly_name} BME680 IAQ Accuracy"

  - platform: template
    name: "${friendly_name} BME680 IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }
